<%- include('partials/user/header') %>

<html>
    <title>My Orders</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    
    <style>
        :root {
            --primary-color: #4f46e5;
            --secondary-color: #f8fafc;
            --success-color: #22c55e;
            --warning-color: #eab308;
            --danger-color: #ef4444;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-radius: 1rem;
        }

        body {
            background-color: var(--secondary-color);
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            color: var(--text-primary);
            line-height: 1.5;
        }

        .page-header {
            background: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .page-title {
            font-size: 1.875rem;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }

        .orders-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        .order-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
            overflow: hidden;
            transition: all 0.2s ease;
        }

        .order-card:hover {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .order-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            background: #f8fafc;
        }

        .order-content {
            padding: 1.5rem;
        }

        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .status-pending {
            background-color: #fef9c3;
            color: var(--warning-color);
        }

        .status-completed {
            background-color: #dcfce7;
            color: var(--success-color);
        }

        .status-cancelled {
            background-color: #fee2e2;
            color: var(--danger-color);
        }

        .order-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .info-item {
            color: var(--text-secondary);
        }

        .info-item strong {
            display: block;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }

        .products-list {
            margin-top: 1.5rem;
        }

        .product-card {
            display: flex;
            align-items: center;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 0.75rem;
            margin-bottom: 1rem;
        }

        .product-image {
            width: 80px;
            height: 80px;
            border-radius: 0.5rem;
            object-fit: cover;
            margin-right: 1.5rem;
        }

        .product-info h5 {
            margin: 0 0 0.5rem 0;
            font-size: 1rem;
            color: var(--text-primary);
        }

        .product-info p {
            margin: 0;
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        .order-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .btn-custom {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            transition: all 0.2s;
        }

        .btn-custom i {
            font-size: 1rem;
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .empty-state i {
            font-size: 3rem;
            color: var(--text-secondary);
            margin-bottom: 1rem;
        }



        .return-section {
            border-top: 1px solid #eee;
            padding-top: 10px;
        }

        .return-reason-select {
            max-width: 250px;
            font-size: 14px;
        }

        .status-badge.status-delivered {
            background-color: #28a745;
            color: white;
            padding: 5px 10px;
            border-radius: 15px;
        }




        
    </style>
</head>
<body>
    <header class="page-header">
        <div class="orders-container">
            <h1 class="page-title">My Orders</h1>
        </div>
    </header>

    <div class="orders-container">
        <% if (orders.length === 0) { %>
            <div class="empty-state">
                <i class="fas fa-shopping-bag"></i>
                <h3>No Orders Yet</h3>
                <p class="text-muted">Looks like you haven't placed any orders yet.</p>
                <a href="/shop" class="btn btn-primary btn-custom">
                    <i class="fas fa-shopping-cart"></i>
                    Start Shopping
                </a>
            </div>
        <% } %>
    
        <% orders.forEach(function(order) { %>
            <div class="order-card">
                <div class="order-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h4 class="mb-1">Order #<%= order.orderNumber %></h4>
                            <span class="text-muted">Placed on <%= order.orderDate %></span>
                        </div>
                        <span class="status-badge status-<%= order.status.toLowerCase() %>">
                            <i class="fas fa-circle me-1"></i>
                            <%= order.status %>
                        </span>
                    </div>
                </div>
    
                <div class="order-content">
                    <div class="order-info">
                        <div class="info-item">
                            <strong>Total Amount</strong>
                            ₹<%= order.finalAmount.toFixed(2) %>
                        </div>
                        <div class="info-item">
                            <strong>Final Amount</strong>
                            ₹<%= order.finalAmount.toFixed(2) %>
                        </div>
                        <div class="info-item">
                            <strong>Payment Method</strong>
                            <%= order.paymentMethod %>
                        </div>
                        <div class="info-item">
                            <strong>Shipping Address</strong>
                            <%= order.address %>
                        </div>
                    </div>
    
                    <div class="products-list">
                        <h5 class="mb-3">Order Items</h5>
                        <% order.products.forEach(function(product) { %>
                            <div class="product-card">
                                <img src="/uploads/product-images/<%= product.image %>" 
                                     alt="<%= product.name %>" 
                                     class="product-image">
                                <div class="product-info">
                                    <h5><%= product.name %></h5>
                                    <p>
                                        <span class="me-3">Quantity: <%= product.quantity %></span>
                                        <span class="me-3">Size: <%= product.size %></span>
                                        <span>Price: ₹<%= product.price.toFixed(2) %></span>
                                    </p>
                                    
                                    <% if (order.status === 'Delivered') { %>
                                        <div class="return-section mt-2">
                                            <select class="form-select return-reason-select" 
                                                    id="returnReasonnn"
                                                    aria-label="Select return reason">
                                                <option value="" selected>Select Return Reason</option>
                                                <option value="wrong_size">Wrong Size</option>
                                                <option value="damaged">Product Damaged/Defective</option>
                                                <option value="not_as_described">Product Not As Described</option>
                                                <option value="wrong_item">Wrong Item Received</option>
                                                <option value="quality_issues">Quality Issues</option>
                                                <option value="other">Other</option>
                                            </select>

                                            
                                            <button class="btn btn-warning mt-2" 
                                                    onclick="initiateReturn('<%= order.orderId %>', '<%= product.id %>')">
                                                <i class="fas fa-undo"></i> Request Return
                                            </button>

                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        <% }); %>
                    </div>
    
                    <div class="order-actions">
                        <button class="btn btn-primary btn-custom" onclick="viewOrderDetails('<%= order.orderId %>')">
                            <i class="fas fa-eye"></i>
                            View Details
                        </button>

                        <button class="btn btn-success btn-custom" onclick="downloadInvoice('<%= order.orderId %>')">
                            <i class="fas fa-file-download"></i>
                            Download Invoice
                        </button>

                        <% if (order.status === 'payment pending') { %>

                            <button class="btn btn-warning btn-custom" 
                                    onclick="retryPayment('<%= order.orderId %>', '<%= order.address._id %>', 'upi', '<%= order.finalAmount %>')">
                                <i class="fas fa-redo"></i> Retry Payment
                            </button>

                            <% } %>
                        
                        
    
                        <% if (order.status === 'Pending') { %>
                            <button class="btn btn-outline-danger btn-custom" onclick="cancelOrder('<%= order.orderId %>', '<%= order.paymentMethod %>', '<%= order.finalAmount.toFixed(0) %>')">
                                <i class="fas fa-times"></i>
                                Cancel Order
                            </button>
    
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary btn-custom dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-edit"></i>
                                    Modify Items
                                </button>
                                <ul class="dropdown-menu">
                                    <% order.products.forEach(function(product) { %>
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="cancelProduct('<%= order.orderId %>', '<%= product.id %>')">
                                                Cancel <%= product.name %>
                                            </a>
                                        </li>
                                    <% }); %>
                                </ul>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        <% }); %>
    </div>


   <!-- Modern Pagination -->
<div class="pagination-container mt-5">
    <nav aria-label="Order pagination">
        <ul class="pagination justify-content-center">
            <!-- First Page Button -->
            <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
                <a class="page-link page-link-arrow" href="/orders?page=1" aria-label="First">
                    <i class="fas fa-angle-double-left"></i>
                </a>
            </li>

            <!-- Previous button -->
            <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
                <a class="page-link page-link-arrow" href="/orders?page=<%= pagination.currentPage - 1 %>" aria-label="Previous">
                    <i class="fas fa-angle-left"></i>
                </a>
            </li>
            
            <!-- First page with ellipsis -->
            <% if (pagination.currentPage > 3) { %>
                <li class="page-item">
                    <a class="page-link" href="/orders?page=1">1</a>
                </li>
                <% if (pagination.currentPage > 4) { %>
                    <li class="page-item disabled">
                        <span class="page-link dots">...</span>
                    </li>
                <% } %>
            <% } %>
            
            <!-- Page numbers - limited to nearby pages -->
            <% for (let i = Math.max(1, pagination.currentPage - 1); i <= Math.min(pagination.totalPages, pagination.currentPage + 1); i++) { %>
                <li class="page-item <%= pagination.currentPage === i ? 'active' : '' %>">
                    <a class="page-link" href="/orders?page=<%= i %>"><%= i %></a>
                </li>
            <% } %>
            
            <!-- Last page with ellipsis -->
            <% if (pagination.currentPage < pagination.totalPages - 2) { %>
                <% if (pagination.currentPage < pagination.totalPages - 3) { %>
                    <li class="page-item disabled">
                        <span class="page-link dots">...</span>
                    </li>
                <% } %>
                <li class="page-item">
                    <a class="page-link" href="/orders?page=<%= pagination.totalPages %>"><%= pagination.totalPages %></a>
                </li>
            <% } %>

            <!-- Next button -->
            <li class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
                <a class="page-link page-link-arrow" href="/orders?page=<%= pagination.currentPage + 1 %>" aria-label="Next">
                    <i class="fas fa-angle-right"></i>
                </a>
            </li>
            
            <!-- Last Page Button -->
            <li class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
                <a class="page-link page-link-arrow" href="/orders?page=<%= pagination.totalPages %>" aria-label="Last">
                    <i class="fas fa-angle-double-right"></i>
                </a>
            </li>
        </ul>
    </nav>
    
    <div class="pagination-info text-center mt-3">
        <span class="text-muted">
            Showing <strong><%= (pagination.currentPage - 1) * pagination.limit + 1 %></strong> 
            to <strong><%= Math.min(pagination.currentPage * pagination.limit, pagination.totalItems) %></strong> 
            of <strong><%= pagination.totalItems %></strong> orders
        </span>
    </div>
</div>
    

    

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

</body>


<script>

function cancelOrder(orderNumber, paymentMethod, paymentAmount) {
    Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to cancel this entire order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!',
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/cancel-order/${orderNumber}`, { 
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ paymentMethod, paymentAmount }) 
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success')
                    .then(() => location.reload());
                } else {
                    Swal.fire('Error!', data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire('Error!', 'An error occurred while cancelling the order.', 'error');
            });
        }
    });
}

    
    function cancelProduct(orderNumber, productId) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to cancel this product?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!',
        }).then(async (result) => {
            if (result.isConfirmed) {
                await fetch(`/cancel-product/${orderNumber}/${productId}`, { 
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Cancelled!', 'The product has been cancelled.', 'success')
                        .then(() => location.reload());
                    } else {
                        Swal.fire('Error!', 'Failed to cancel the product. Please try again.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire('Error!', 'An error occurred while cancelling the product.', 'error');
                });
            }
        });
    }
    
    
    function viewOrderDetails(orderNumber) {
        window.location.href = `/order-details/${orderNumber}`;
    }
    
    
    async function initiateReturn(orderId, productId) {
         
        const reason = document.getElementById('returnReasonnn').value
        console.log('order Id: ', orderId, 'product Id: ', productId, 'reason: ', reason);
        
        if (!reason) {
            Swal.fire({
                icon: 'warning',
                title: 'Return Reason Required',
                text: 'Please select a return reason',
                confirmButtonColor: '#3085d6'
            });
            return;
        }
        
        try {
            // Show loading state
            Swal.fire({
                title: 'Processing Return Request',
                text: 'Please wait...',
                allowOutsideClick: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading();
                }
            });
    
            const response = await fetch('/orders/return', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    orderId,
                    productId,
                    reason
                })
            });
    
            const data = await response.json();
    
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Return Request Initiated',
                    text: 'Your return request has been successfully submitted',
                    confirmButtonColor: '#28a745',
                    showConfirmButton: true
                });
                location.reload();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Return Request Failed',
                    text: data.message || 'Failed to initiate return request',
                    confirmButtonColor: '#dc3545'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'An error occurred while processing your request',
                confirmButtonColor: '#dc3545',
                footer: '<a href="#">Contact support</a>'
            });
        }
    }
    

    // downlaod invoice
    async function downloadInvoice(orderId) {
        window.location.href = `/download-invoice/${orderId}`;
    }


async function retryPayment(orderId, addressId, paymentMethod, amount) {

    console.log('Retry payment data:', orderId, paymentMethod, amount);
    
    try {

        console.log('Order datas: ', orderId, amount);
        

        const responseOfRazorpay = await fetch("/create-retry-order", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ amount: amount, currency: "INR", orderId: orderId }),  
        });

        const data = await responseOfRazorpay.json();

        console.log('data from the razorpay: ', data);
        
        if (!data.success) throw new Error("Failed to create order");

        const options = {
            key: "rzp_test_LcFdI4xvx8V63T",
            amount: data.order.amount,  
            currency: data.order.currency,
            order_id: data.order.id,
            name: "VOGUE VAULT",
            description: "Test Transaction",
            handler: async function (response) {

                Swal.fire({
                    title: "Payment Successful!",
                    text: "Payment ID: " + response.razorpay_payment_id,
                    icon: "success",
                    confirmButtonColor: "#28a745",
                    confirmButtonText: "OK",
                }).then(async () => {

                    console.log('helloo heyyy');

                    const response = await fetch('/retryPaymentSuccess', {
                        method: 'POST',
                        headers: {
                            'Content-type': 'application/json'
                        },
                        body: JSON.stringify({ orderId })
                    })


                    const result = await response.json()


                    if (result.success) {
                        window.location.href = '/payment-success'
                        return;
                    }

                    Swal.fire({
                        title: "Payment Failed!",
                        text: 'Error while retrying payment',
                        icon: "error",
                        confirmButtonColor: "#dc3545",
                        confirmButtonText: "Try Again",
                    })

                });
            },
            prefill: {
                email: "test@example.com",
                contact: "9999999999",
            },
            theme: { color: "#3399cc" },
            modal: {
                ondismiss: async function () {
                        window.location.href = `/payment-failure?orderId=${data.order.id}&amount=${amountInRupees}&paymentMethod=upi&addressId=${addressId}`;
                        return;
                    
                }
            }
        };

        const rzp = new Razorpay(options);
        rzp.open();

    } catch (error) {
        Swal.fire({
            title: "Payment Failed!",
            text: error.message,
            icon: "error",
            confirmButtonColor: "#dc3545",
            confirmButtonText: "Try Again",
        }).then(() => {
            console.log('Selected address ID:', addressId);
            window.location.href = `/payment-failure?orderId=${data.order.id}&amount=${amount}&paymentMethod=RAZORPAY&addressId=${addressId}`;
        });
    }
}

    
        </script>
</html>